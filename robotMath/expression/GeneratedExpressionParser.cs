// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-D1RDMA5
// DateTime: 10/22/2017 6:18:32 PM
// UserName: gladc
// Input file <ExpressionParser.y - 10/22/2017 5:21:10 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace robotMath.Expression
{
public enum Tokens {error=96,
    EOF=97,Identifier=98,sym=99,lParen=100,rParent=101,floatVal=102,
    intVal=103,UMINUS=104};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<Object,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public Object yylval;
  public LexLocation yylloc;
  public ScanObj( int t, Object val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<Object, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[10];
  private static State[] states = new State[18];
  private static string[] nonTerms = new string[] {
      "expr", "$accept", "op", };

  static Parser() {
    states[0] = new State(new int[]{98,6,40,12,103,15,102,16},new int[]{-1,1});
    states[1] = new State(new int[]{97,2,99,5},new int[]{-3,3});
    states[2] = new State(-1);
    states[3] = new State(new int[]{98,6,40,12,103,15,102,16},new int[]{-1,4});
    states[4] = new State(new int[]{99,5,97,-5,44,-5,41,-5},new int[]{-3,3});
    states[5] = new State(-9);
    states[6] = new State(new int[]{40,7,97,-8,99,-8,44,-8,41,-8});
    states[7] = new State(new int[]{98,6,40,12,103,15,102,16},new int[]{-1,8});
    states[8] = new State(new int[]{44,9,41,17,99,5},new int[]{-3,3});
    states[9] = new State(new int[]{98,6,40,12,103,15,102,16},new int[]{-1,10});
    states[10] = new State(new int[]{41,11,99,5},new int[]{-3,3});
    states[11] = new State(-2);
    states[12] = new State(new int[]{98,6,40,12,103,15,102,16},new int[]{-1,13});
    states[13] = new State(new int[]{41,14,99,5},new int[]{-3,3});
    states[14] = new State(-4);
    states[15] = new State(-6);
    states[16] = new State(-7);
    states[17] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,97});
    rules[2] = new Rule(-1, new int[]{98,40,-1,44,-1,41});
    rules[3] = new Rule(-1, new int[]{98,40,-1,41});
    rules[4] = new Rule(-1, new int[]{40,-1,41});
    rules[5] = new Rule(-1, new int[]{-1,-3,-1});
    rules[6] = new Rule(-1, new int[]{103});
    rules[7] = new Rule(-1, new int[]{102});
    rules[8] = new Rule(-1, new int[]{98});
    rules[9] = new Rule(-3, new int[]{99});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // expr -> Identifier, '(', expr, ',', expr, ')'
{ CurrentSemanticValue = MakeIdentifierOp(  GetText(),  (Node) ValueStack[ValueStack.Depth-4],  (Node) ValueStack[ValueStack.Depth-2]); }
        break;
      case 3: // expr -> Identifier, '(', expr, ')'
{ CurrentSemanticValue = MakeIdentifierOp(  GetText(),  (Node) ValueStack[ValueStack.Depth-2]); }
        break;
      case 4: // expr -> '(', expr, ')'
{ CurrentSemanticValue = (Node) ValueStack[ValueStack.Depth-2]; }
        break;
      case 5: // expr -> expr, op, expr
{ CurrentSemanticValue = MakeBinary(    (NodeTag) ValueStack[ValueStack.Depth-2],  (Node) ValueStack[ValueStack.Depth-3],  (Node) ValueStack[ValueStack.Depth-1]  ); }
        break;
      case 6: // expr -> intVal
{ CurrentSemanticValue = MakeLeaf( Convert.ToUInt64(GetText()) ); }
        break;
      case 7: // expr -> floatVal
{ CurrentSemanticValue = MakeLeaf( Convert.ToDouble(GetText()) ); }
        break;
      case 8: // expr -> Identifier
{ CurrentSemanticValue = MakeLeaf(    (String) ValueStack[ValueStack.Depth-1] ); }
        break;
      case 9: // op -> sym
{ CurrentSemanticValue = GetNodeTag( GetText() ); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

/*
 * All the code is in the helper file ExpressionTreeHelper.cs
 */ 

}
}
